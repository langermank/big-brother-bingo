---
export interface Props {
  title: string;
  body: string;
  href: string;
}
// This script runs at build time
import data from "../data/bingo-items.json";

// Randomly select 25 of the bingo items, ensuring the "free" item is included
let bingoItems = [...data.bingoItems];
const freeItemIndex = bingoItems.findIndex(
  (item) => item.name === "Free Space"
);
const freeItem = bingoItems[freeItemIndex];
bingoItems.splice(freeItemIndex, 1);

for (let i = bingoItems.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [bingoItems[i], bingoItems[j]] = [bingoItems[j], bingoItems[i]];
}

bingoItems = bingoItems.slice(0, 24);
bingoItems.splice(12, 0, freeItem);
---

<bingo-card items={JSON.stringify(bingoItems)}></bingo-card>

<script>
  class BingoCard extends HTMLElement {
    // constructor() {
    //   super();

    //   // Initialize state
    //   this.state = Array(5)
    //     .fill(false)
    //     .map(() => Array(5).fill(false));

    //   // Create a shadow root
    //   this.shadow = this.attachShadow({ mode: "open" });
    // }

    // connectedCallback() {
    //   this.items = JSON.parse(this.getAttribute("items"));
    //   this.render();

    //   // Add event listeners to buttons
    //   this.shadowRoot.querySelectorAll("button").forEach((button, index) => {
    //     button.addEventListener("click", () => {
    //       console.log("Button clicked");
    //       this.check(index);
    //     });
    //   });
    // }

    constructor() {
      super();

      // Initialize state
      this.state = Array(5)
        .fill(false)
        .map(() => Array(5).fill(false));

      // Create a shadow root
      this.shadow = this.attachShadow({ mode: "open" });
    }

    connectedCallback() {
      this.items = JSON.parse(this.getAttribute("items"));
      this.render();

      // Add event listeners to buttons
      this.buttons = Array.from(this.shadowRoot.querySelectorAll("button"));
      this.buttons.forEach((button, index) => {
        button.addEventListener("click", () => {
          console.log("Button clicked");
          this.check(index);
        });

        button.addEventListener("keydown", (event) =>
          this.handleKeydown(event, index)
        );
      });
    }

    handleKeydown(event, index) {
      let newIndex;
      switch (event.key) {
        case "ArrowRight":
          newIndex = (index + 1) % this.buttons.length;
          break;
        case "ArrowLeft":
          newIndex = (index - 1 + this.buttons.length) % this.buttons.length;
          break;
        case "ArrowUp":
          newIndex = (index - 5 + this.buttons.length) % this.buttons.length;
          break;
        case "ArrowDown":
          newIndex = (index + 5) % this.buttons.length;
          break;
        default:
          return;
      }

      event.preventDefault();
      this.buttons[newIndex].focus();
    }

    render() {
      this.shadow.innerHTML = `
            <link rel="stylesheet" href="../public/BingoCard.css">
            <style>
              .BingoCard {
                margin: 0;
                padding: 0;
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(20%, 1fr));
                grid-template-rows: repeat(auto-fill, minmax(20%, 1fr));
                /* height: 100%; */
              }

              tr[role="row"] {
                display: grid;
                grid-template-columns: repeat(5, 1fr);
                grid-template-rows: 1fr;
                gap: 0px 2px
              }

              table {
                border-collapse: collapse;
                width: 100%;
                height: 100%;
              }

              td[role="gridcell"] {
                aspect-ratio: 1;
                display: grid;
                place-content: center;
                background-color: var(--stone-1);
              }

              tbody {
                background: deeppink;
                display: grid;
                grid-template-rows: repeat(5, max-content);
                grid-row-gap: 2px;
                padding: 1rem;
              }

              .BingoCard--item {
                aspect-ratio: 1;
                overflow: hidden;
                border: solid 1px black;
                padding: 1rem;
                display: grid;
                place-content: center;
                position: relative;
              }

              button[aria-pressed="true"] {
                background-color: var(--stone-6);
              }

              input[type="checkbox"]::before {
                height: 100%;
                width: 100%;
                content: "";
                display: block;
                background-color: var(--stone-6);
              }

              input[type="checkbox"] {
                /* remove the checkbox from the page flow, positioning it on top of the SVG */
                position: absolute;
                /* set same dimensions as the SVG */
                width: 100%;
                height: 100%;
                /* hide it */
                opacity: 0.00001;
              }
            </style>
            <table role="grid">
                <tbody>
                ${this.items
                  .reduce((rows, item, index) => {
                    const id = item.name.toLowerCase().split(" ").join("-");

                    if (index % 5 === 0) {
                      rows.push([]);
                    }

                    rows[rows.length - 1].push(`
                      <td role="gridcell">
                        <button tabindex="${
                          index === 0 ? "0" : "-1"
                        }" aria-pressed="${
                      index === 12
                        ? true
                        : this.state[Math.floor(index / 5)][index % 5]
                    }" id="${id}" ${index === 12 ? "disabled" : ""}>
                          ${item.name}
                        </button>
                      </td>`);

                    return rows;
                  }, [])
                  .map((row) => `<tr role="row">${row.join("")}</tr>`)
                  .join("")}
                </tbody>
            </table>
        `;
    }

    // check(index) {
    //   const row = Math.floor(index / 5);
    //   const col = index % 5;
    //   this.state[row][col] = !this.state[row][col];
    //   if (this.hasWon()) {
    //     console.log("Bingo!");
    //   }
    // }

    check(index) {
      const row = Math.floor(index / 5);
      const col = index % 5;

      // If this is the "free space" button (let's say it's at index 12), do not change its state
      if (index !== 12) {
        this.state[row][col] = !this.state[row][col];
        this.render();

        // Add event listeners to buttons after re-rendering
        this.shadowRoot.querySelectorAll("button").forEach((button, index) => {
          button.addEventListener("click", () => {
            console.log("Button clicked");
            this.check(index);
          });
        });
      }

      if (this.hasWon()) {
        console.log("Bingo!");
      }
    }

    hasWon() {
      // Check rows
      if (this.state.some((row) => row.every(Boolean))) {
        console.log("Win by row");
        return true;
      }

      // Check columns
      for (let col = 0; col < 5; col++) {
        if (this.state.every((row) => row[col])) {
          console.log("Win by column", col);
          return true;
        }
      }

      // Check diagonals
      if (this.state.every((row, index) => row[index])) {
        console.log("Win by diagonal (top left to bottom right)");
        return true;
      }

      if (this.state.every((row, index) => row[4 - index])) {
        console.log("Win by diagonal (top right to bottom left)");
        return true;
      }

      console.log("No win");
      return false;
    }
  }

  customElements.define("bingo-card", BingoCard);
</script>
