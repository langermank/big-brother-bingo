---
export interface Props {
  title: string;
  body: string;
  href: string;
}
import "../styles/BingoCard.css";
// This script runs at build time
import data from "../data/bingo-items.json";

// Randomly select 25 of the bingo items, ensuring the "free" item is included
let bingoItems = [...data.bingoItems];
const freeItemIndex = bingoItems.findIndex(
  (item) => item.name === "Free Space"
);
const freeItem = bingoItems[freeItemIndex];
bingoItems.splice(freeItemIndex, 1);

for (let i = bingoItems.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [bingoItems[i], bingoItems[j]] = [bingoItems[j], bingoItems[i]];
}

bingoItems = bingoItems.slice(0, 24);
bingoItems.splice(12, 0, freeItem);
---

<bingo-card items={JSON.stringify(bingoItems)} style="display: block;"
></bingo-card>

<script>
  class BingoCard extends HTMLElement {
    state: any[][];
    items: any;
    buttons: HTMLButtonElement[] = [];
    constructor() {
      super();

      // Initialize state
      this.state = Array(5)
        .fill(false)
        .map(() => Array(5).fill(false));

      // Set the "free space" state to true
      this.state[Math.floor(12 / 5)][12 % 5] = true;
    }

    connectedCallback() {
      const items = this.getAttribute("items");
      this.items = items ? JSON.parse(items) : [];
      // this.items = JSON.parse(this.getAttribute("items"));
      this.innerHTML = `
        <table role="grid" class="BingoCard">
          <tbody>
            ${this.items
              .reduce(
                (rows: string[][], item: { name: string }, index: number) => {
                  const id = item.name.toLowerCase().split(" ").join("-");

                  if (index % 5 === 0) {
                    rows.push([]);
                  }

                  rows[rows.length - 1].push(`
                  <td role="gridcell">
                    <button class="BingoCard--button" tabindex="${
                      index === 0 ? "0" : "-1"
                    }" aria-pressed="${
                    index === 12
                      ? true
                      : this.state[Math.floor(index / 5)][index % 5]
                  }" id="${id}" ${index === 12 ? "disabled" : ""}>
                      <span>${item.name}</span>
                    </button>
                  </td>`);

                  return rows;
                },
                []
              )
              .map((row: any[]) => `<tr role="row">${row.join("")}</tr>`)
              .join("")}
          </tbody>
        </table>
      `;
      this.render();

      // Add event listeners to buttons
      this.buttons = Array.from(this.querySelectorAll("button"));
      this.buttons.forEach((button, index) => {
        button.addEventListener("click", () => {
          console.log("Button clicked");
          this.check(index);
        });

        button.addEventListener("keydown", (event) =>
          this.handleKeydown(event, index)
        );
      });
    }

    handleKeydown(event: KeyboardEvent, index: number) {
      let newIndex;
      switch (event.key) {
        case "ArrowRight":
          newIndex = (index + 1) % this.buttons.length;
          break;
        case "ArrowLeft":
          newIndex = (index - 1 + this.buttons.length) % this.buttons.length;
          break;
        case "ArrowUp":
          newIndex = (index - 5 + this.buttons.length) % this.buttons.length;
          break;
        case "ArrowDown":
          newIndex = (index + 5) % this.buttons.length;
          break;
        default:
          return;
      }

      event.preventDefault();
      this.buttons[newIndex].focus();
    }

    render() {
      this.buttons = Array.from(this.querySelectorAll("button"));
      this.buttons.forEach((button, index) => {
        button.setAttribute(
          "aria-pressed",
          index === 12 ? true : this.state[Math.floor(index / 5)][index % 5]
        );
      });
    }

    check(index: number) {
      const row = Math.floor(index / 5);
      const col = index % 5;

      // If this is the "free space" button (let's say it's at index 12), do not change its state
      if (index !== 12) {
        this.state[row][col] = !this.state[row][col];
        this.render();
      }

      if (this.hasWon()) {
        console.log("Bingo!");
      }
    }

    hasWon() {
      // Check rows
      if (this.state.some((row) => row.every(Boolean))) {
        console.log("Win by row");
        return true;
      }

      // Check columns
      for (let col = 0; col < 5; col++) {
        if (this.state.every((row) => row[col])) {
          console.log("Win by column", col);
          return true;
        }
      }

      // Check diagonals
      if (this.state.every((row, index) => row[index])) {
        console.log("Win by diagonal (top left to bottom right)");
        return true;
      }

      if (this.state.every((row, index) => row[4 - index])) {
        console.log("Win by diagonal (top right to bottom left)");
        return true;
      }

      console.log("No win");
      return false;
    }
  }

  customElements.define("bingo-card", BingoCard);
</script>
