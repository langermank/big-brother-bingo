---
export interface Props {
  title: string;
  body: string;
  href: string;
}
import "../styles/BingoCard.css";
// This script runs at build time
import data from "../data/bingo-items.json";

// Randomly select 25 of the bingo items, ensuring the "free" item is included
let bingoItems = [...data.bingoItems];
const freeItemIndex = bingoItems.findIndex(
  (item) => item.name === "Free Space"
);
const freeItem = bingoItems[freeItemIndex];
bingoItems.splice(freeItemIndex, 1);

for (let i = bingoItems.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [bingoItems[i], bingoItems[j]] = [bingoItems[j], bingoItems[i]];
}

bingoItems = bingoItems.slice(0, 24);
bingoItems.splice(12, 0, freeItem);
---

<bingo-card items={JSON.stringify(bingoItems)} style="display: block;"
></bingo-card>

<script>
  import confetti from "canvas-confetti";

  class BingoCard extends HTMLElement {
    state: any[][];
    items: any;
    buttons: HTMLButtonElement[] = [];
    constructor() {
      super();

      // Initialize state
      this.state = Array(5)
        .fill(false)
        .map(() => Array(5).fill(false));

      // Set the "free space" state to true
      this.state[Math.floor(12 / 5)][12 % 5] = true;
    }

    connectedCallback() {
      const colors = [
        "--bgColor-chip-1",
        "--bgColor-chip-2",
        "--bgColor-chip-3",
        "--bgColor-chip-4",
        "--bgColor-chip-5",
        "--bgColor-chip-6",
        "--bgColor-chip-7",
      ];

      // Select a random color
      const randomColor = colors[Math.floor(Math.random() * colors.length)];

      // Set the color
      document.documentElement.style.setProperty(
        "--bgColor-chip",
        `var(${randomColor})`
      );
      const items = this.getAttribute("items");
      this.items = items ? JSON.parse(items) : [];
      // this.items = JSON.parse(this.getAttribute("items"));
      this.innerHTML = `
        <div class="BingoCard">
          <div class="BingoCard--header">
            <h1>Big Brother Bingo</h1>
          </div>
          <div class="BingoCard-body">
            ${this.items
              .map((item, index) => {
                const id = item.name.toLowerCase().split(" ").join("-");
                const freeSpace = index === 12;

                return `
                  <div class="BingoCard-cell">
                    <button class="BingoCard-cell--button ${
                      freeSpace ? `FreeSpace` : ""
                    }" tabindex="${index === 0 ? "0" : "-1"}" aria-pressed="${
                  freeSpace
                    ? true
                    : this.state[Math.floor(index / 5)][index % 5]
                }" id="${id}" ${index === 12 ? "disabled" : ""}>
                      ${
                        freeSpace
                          ? `<span class="FreeSpace--iconGroup"><svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 512 512"><!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M211 7.3C205 1 196-1.4 187.6 .8s-14.9 8.9-17.1 17.3L154.7 80.6l-62-17.5c-8.4-2.4-17.4 0-23.5 6.1s-8.5 15.1-6.1 23.5l17.5 62L18.1 170.6c-8.4 2.1-15 8.7-17.3 17.1S1 205 7.3 211l46.2 45L7.3 301C1 307-1.4 316 .8 324.4s8.9 14.9 17.3 17.1l62.5 15.8-17.5 62c-2.4 8.4 0 17.4 6.1 23.5s15.1 8.5 23.5 6.1l62-17.5 15.8 62.5c2.1 8.4 8.7 15 17.1 17.3s17.3-.2 23.4-6.4l45-46.2 45 46.2c6.1 6.2 15 8.7 23.4 6.4s14.9-8.9 17.1-17.3l15.8-62.5 62 17.5c8.4 2.4 17.4 0 23.5-6.1s8.5-15.1 6.1-23.5l-17.5-62 62.5-15.8c8.4-2.1 15-8.7 17.3-17.1s-.2-17.3-6.4-23.4l-46.2-45 46.2-45c6.2-6.1 8.7-15 6.4-23.4s-8.9-14.9-17.3-17.1l-62.5-15.8 17.5-62c-2.4-8.4 0-17.4-6.1-23.5s-15.1-8.5-23.5-6.1l-62 17.5L341.4 18.1c-2.1-8.4-8.7-15-17.1-17.3S307 1 301 7.3L256 53.5 211 7.3z"/></svg><span class="BingoCard--label">FREE</span></span>`
                          : `<span class="BingoCard--label">${item.name}</span>`
                      }
                    </button>
                  </div>
                `;
              })
              .join("")}
          </div>
        </div>
      `;
      this.render();

      // Add event listeners to buttons
      this.buttons = Array.from(this.querySelectorAll("button"));
      this.buttons.forEach((button, index) => {
        button.addEventListener("click", () => {
          console.log("Button clicked");
          this.check(index);
        });

        button.addEventListener("keydown", (event) =>
          this.handleKeydown(event, index)
        );
      });
    }

    handleKeydown(event: KeyboardEvent, index: number) {
      let newIndex;
      switch (event.key) {
        case "ArrowRight":
          newIndex = (index + 1) % this.buttons.length;
          break;
        case "ArrowLeft":
          newIndex = (index - 1 + this.buttons.length) % this.buttons.length;
          break;
        case "ArrowUp":
          newIndex = (index - 5 + this.buttons.length) % this.buttons.length;
          break;
        case "ArrowDown":
          newIndex = (index + 5) % this.buttons.length;
          break;
        default:
          return;
      }

      event.preventDefault();
      this.buttons[newIndex].focus();
    }

    render() {
      this.buttons = Array.from(this.querySelectorAll("button"));
      this.buttons.forEach((button, index) => {
        button.setAttribute(
          "aria-pressed",
          index === 12 ? true : this.state[Math.floor(index / 5)][index % 5]
        );
      });
    }

    hasConfettiShown: boolean = false;

    createConfetti() {
      if (!this.hasConfettiShown) {
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 },
          disableForReducedMotion: true,
        });
        this.hasConfettiShown = true;
      }
    }

    check(index: number) {
      const row = Math.floor(index / 5);
      const col = index % 5;

      // If this is the "free space" button (let's say it's at index 12), do not change its state
      if (index !== 12) {
        this.state[row][col] = !this.state[row][col];
        this.render();
      }

      if (this.hasWon()) {
      }
    }

    hasWon() {
      // Check rows
      if (this.state.some((row) => row.every(Boolean))) {
        this.createConfetti();
        return true;
      }

      // Check columns
      for (let col = 0; col < 5; col++) {
        if (this.state.every((row) => row[col])) {
          this.createConfetti();
          return true;
        }
      }

      // Check diagonals
      if (this.state.every((row, index) => row[index])) {
        console.log("Win by diagonal (top left to bottom right)");
        this.createConfetti();
        return true;
      }

      if (this.state.every((row, index) => row[4 - index])) {
        console.log("Win by diagonal (top right to bottom left)");
        this.createConfetti();
        return true;
      }

      console.log("No win");
      return false;
    }
  }

  customElements.define("bingo-card", BingoCard);
</script>
